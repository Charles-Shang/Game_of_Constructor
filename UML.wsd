@startuml CS246 Final Project UML ddl#1
skinparam style strictuml
skinparam SequenceMessageAlignment center
skinparam classAttributeIconSize 0

class "**Board**"  {
    -tiles : std::vector<Tile>
    +initBoard() : void 
    +printBoard() : void 
} 

enum "**TileType**" << enumeration >> {
    BRICK 
    ENERGY 
    GLASS 
    HEAT 
    WIFI 
    PARK
}

class "**Tile**" {
    - type : Integer
    - tileNum : Integer
    - tileValue : Integer
    - hasGeese : Boolean
    - theVertices : std::vector<Vertices>
    + initTile() : void
} 

abstract class "**Observer**" {
    + {abstract} update() : void
    + {abstract} ~Observer() : void
}

abstract class "**Subject**" {
    - observers : std::vector<std::share_ptr<Observer>>
    + attach (o : const std::share_ptr<Observer>&) :void
    + {abstract} notifyObserver() : void
    + {abstract} ~Subject() : void
}

class "**Vertices**" {
    - location : Integer
    - neighbourEdges : std::vector<std::share_ptr<Edge>> 
    - canBuildResidence : Boolean
    - whichBuilder : Integer
    + addResidence() : void 
    + updateAvailableResidence() : void
    + notifyObserver(): void
    + update(): void
}

class "**Edge**" {
    - location : Integer 
    - canBuildRoad : Boolean
    - hasRoad : Integer 
    - whichBuilder : Integer 
    - neighbourResidence : std::vector<std::share_ptr<Vertices>>
    + addRoad() : void 
    + updateAvailable() : void 
}

enum "**BuilderType**" << enumeration >> {
    BLUE 
    RED 
    ORANGE 
    YELLOW 
}

class "**Builder**" {
    - color : Integer 
    - fairDice : Boolean
    - builtLst : std::vector<Residence> 
    - resources : std::vector<int>
    + rollDice() : void 
    + upgradeResidence(location : Integer) : void
    + printStatus() : void 
    + printResidence() : void 
    + buildRoad(location : Integer) : void
    + buildResidence(location : Integer) : void
    + calculatePoints() : Integer 
}

enum "**ResidenceType**" << enumeration >> {
    BASEMENT 
    HOUSE
    TOWER  
}

class "**Residence**" {
    - level : Integer 
    - buildingPoints : Integer 
    + upgrade() : void 
}

class "**Game**" {
    - thisBoard : Board 
    - builderLst : std::vector<Builder>
    + play() : void 
}

"**Game**" *--> "1" "**Board**"
"**Subject**" o--> "*" "**Observer**" : "observer"
"**Vertices**" --|> "**Subject**"
"**Vertices**" --|> "**Observer**"
"**Vertices**" o--> "2..3" "**Edge**" 
"**Edge**" o--> "2" "**Vertices**"
"**Game**" *--> "4" "**Builder**"
"**Board**" *--> "19" "**Tile**" : {ordered}
"**Tile**" o--> "6" "**Edge**"
"**Tile**" o--> "6" "**Vertices**"
"**Builder**" *--> "0..*" "**Residence**"
"**BuilderType**" -- "**Builder**"
"**TileType**" -- "**Tile**"
"**ResidenceType**" -- "**Residence**"

@enduml