@startuml CS246 Final Project UML ddl#1
skinparam style strictuml
skinparam SequenceMessageAlignment center
skinparam classAttributeIconSize 0

class "**Board**"  {
    - tiles : std::vector<Tile>
    - verticeMap : std::map<int, std::vector<int>>
    - edgeMap : std::map<int, std::vector<int>>
    - allVertices : std::vector<std::shared_ptr<Vertices>>
    - allEdge : std::vector<std::shared_ptr<Edge>>
    - resources : std::vector<int>
    - tileValues : std::vector<int>
    + initSelection(mode : Integer, fileName : std::string) : void
    + setupVerticesAndEdgesRelation() : void 
    + checkCanBuildResAt(location : Integer, builder : Integer, first : Boolean) : Boolean
    + buildResAt(location : Integer, builder : Integer) : void
    + checkCanBuildRoadAt(location : Integer) : Boolean
    + whichHasGeese() : Integer
    + transferGeese(current : Integer, destination : Integer) : void
    + getPlayersOnTile(location : Integer, nonRepeat : Boolean) : std::vector<int>
    + checkCanBuildRoadAt(colour : Integer, location : Integer) : Boolean
    + buildRoadAt(colour : Integer, location : Integer) : void
    + tileValToNum(tileValue : Integer) : std::vector<int> 
    + getRssOnTile(curTile : Integer) : Integer
    + std::vector<int> getResLocOnTile(location : Integer) : std::vector<int> 
    + getBoardData() : std::string 
    + clearBoard() : void

}


class "**Tile**" {
    - type : Integer
    - tileNum : Integer
    - tileValue : Integer
    - hasGeese : Boolean
    - theVertices : std::vector<int>
    - theEdges : std::vector<int>
    + addVertices(vertice : Integer) : void
    + addEdge(edge : Integer) : void
    + updateGeese(state : Boolean) : void
    + clearTile() : void
}

class "**Vertices**" {
    - location : Integer
    - canBuildResidence : Boolean
    - whichBuilder : Integer
    - connectedEdges : std::vector<int>
    + addEdgeNeighbour(edge : const int &) : void
    + buildRes(int builder) : void
    + clearVertex() : void
}

class "**Edge**" {
    - location : Integer
    - hasRoad : Boolean
    - whichBuilder : Integer
    - connectedVertices : std::vector<int>
    + addVerticeNeighbour(const int &vertice) : void
    + clearEdge() : void
}

class "**Builder**" {
    - colour : Integer
    - fairDice : Boolean
    - seed : std::default_random_engine
    - builtLst : std::vector<std::shared_ptr<Residence>>
    - roadLst : std::vector<int>
    - resources : std::vector<int>
    + getBuilderName() : std::string
    + buildResidence(location : Integer, first : Boolean) : void
    + colourShortName() : std::string
    + getResOrRoadDisplay(location : Integer, type : std::string) : std::string 
    + calculatePoints() : Integer
    + switchFairDice(state : Boolean) : void
    + rollDice() : Integer
    + calculateResouceSum() : Integer 
    + listAllRss() : std::vector<int> 
    + modifiesResources(resType : Integer, delta : Integer) : void
    + printStatus() : void
    + printResidence() : void
    + haveEnoughRssForResidence() : void 
    + haveRssForImprove(location : Integer) : Boolean
    + haveEnoughRssForRoad() : Boolean 
    + upgradeResidence(location : Integer) : std::string 
    + getResLevelOnVertex(vertexNum : Integer) : Integer
    + highestLevel(location : Integer) : Boolean
    + haveResidence(location : Integer) : Boolean
    + haveRoad(location : Integer) : Boolean
    + getNumOfRssOf(type : Integer) : Integer
    + buildRoad(roadNum : Integer) : void
    + trade(give : Integer, take : Integer) : void
    + getData() : std::string 
    + clearBuilder() : void
}

class "**Residence**" {
    - location : Integer
    - level : Integer
    - buildingPoints : Integer
    + clearRes() : void
}

class "**Game**" {
    - thisBoard : Board
    - allPlayers : std::vector<std::shared_ptr<Builder>>
    - seed : std::default_random_engine
    - curPlayer : Integer
    + initializeGame(inputMode : int, fileName : std::string) : void
    + play() : void
    + clearAll() : void
}

"**Game**" *--> "1" "**Board**"
"**Game**" *--> "4" "**Builder**"
"**Board**" *--> "19" "**Tile**" : {ordered}
"**Board**" *--> "53" "**Vertices**" : {ordered}
"**Board**" *--> "71" "**Edge**" : {ordered}
"**Builder**" *--> "0..*" "**Residence**"

@enduml